<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>天气新闻APP</title>
      <link href="/2022/01/04/tian-qi-xin-wen-app/"/>
      <url>/2022/01/04/tian-qi-xin-wen-app/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> android </tag>
            
            <tag> okhttp </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于flask的实时人流量监测数据可视化项目</title>
      <link href="/2021/12/07/socket/"/>
      <url>/2021/12/07/socket/</url>
      
        <content type="html"><![CDATA[<h1 id="运用socket实现云服务端的数据接收"><a href="#运用socket实现云服务端的数据接收" class="headerlink" title="运用socket实现云服务端的数据接收"></a>运用socket实现云服务端的数据接收</h1><ul><li>首先要配置好云服务端，我这里用的python语言进行程序的编写。主要方法分为两个。因为接收的数据是json数据，我主要的方法是用python将传输过来数据类型转化为json。因为socket的传输只能bytes的数据类型。</li></ul><ol><li>先用socket方法连接到云服务端<br>(<code>)  name = socket.gethostname()  HOST = '192.168.147.1'#socket.gethostbyname(name)  PORT = 8080  s = socket.socket()  s.bind((HOST,PORT))  s.listen(5)  print("listening")  conn,addr = s.accept()  print("connected by ",addr) (</code>)</li><li>设置循环将数据接收并以json格式保存<br>(<code>)  while True:  time.sleep(1)  data=conn.recv(102400)  data1 = data  team[i] = str(data1)  i = i + 1  with open('mydata.json', 'w') as f:  json.dump(team, f)  If not data:  break  conn.sendall(b'Data received: ' + data1) (</code>)<h1 id="配置服务端实现后台运行python程序"><a href="#配置服务端实现后台运行python程序" class="headerlink" title="配置服务端实现后台运行python程序"></a>配置服务端实现后台运行python程序</h1></li></ol><ul><li>了解flask框架，然后编写相关程序服务端配置：</li></ul><ol><li>完整的flask项目</li><li>服务器，或者自己用虚拟机也行，我这里用的是阿里云，cenros7.3</li><li>Flask框架对于web端的相关代码<br>(```)<br> @app.route(‘/addrec’, methods=[‘POST’, ‘GET’])<br>def addrec():<br> if request.method == ‘POST’:<br> try:<br>     nm = request.form[‘nm’]<br>     addr = request.form[‘add’]<br>     city = request.form[‘city’]<br>     pin = request.form[‘pin’]<br><br>     with sql.connect(“database.db”) as con:<br>         cur = con.cursor()<br><br>         cur.execute(“INSERT INTO students (name,addr,city,pin)VALUES(?, ?, ?, ?)”,(nm,addr,city,pin) )<br><br>         con.commit()<br>         msg = “Record successfully added”<br> except:<br>     con.rollback()<br>     msg = “error in insert operation”<br><br> finally:<br>     return render_template(“result.html”, msg=msg)<br>     con.close()</li></ol><p>(```)<br>4. 实现flask网页响应数据库读取实现可视化,数据库配置:<br><img src="/medias/flask/pt01.png"></p><ul><li><p>然后编写html的相关代码并放入templates中<br><img src="/medias/flask/pt02.png"></p></li><li><p>最后将html文件绑定到flask中实现网页的显示</p><h3 id="显示数据库内容相关代码"><a href="#显示数据库内容相关代码" class="headerlink" title="显示数据库内容相关代码"></a>显示数据库内容相关代码</h3><p>(```)<br>  @app.route(‘/addrec’, methods=[‘POST’, ‘GET’])<br>def addrec():</p><p>  if request.method == ‘POST’:<br>  print(request)<br>  try:<br>      con = pymysql.connect(“106.14.247.240”, “root”, “123456”, “test”)<br>      cur = con.cursor()<br>      cur.execute(“select * from original_data”)<br>      rows = cur.fetchall()<br>      for row in rows:<br>          if(row[0]==request):<br>              print()<br>      msg = “Record successfully added”<br>  except:<br>      con.rollback()<br>      msg = “error in insert operation”<br><br>  finally:<br>      return render_template(“list.html”, rows=rows)<br>      con.close()</p></li></ul><p>@app.route(‘/list’)<br>def list():<br>    con = pymysql.connect(“106.14.247.240”, “root”, “123456”, “test”)<br>    cur = con.cursor()<br>    cur.execute(“select * from original_data”)<br>    rows = cur.fetchall()<br>    return render_template(“list.html”, rows=rows)<br>(```)</p><h3 id="显示图像相关代码"><a href="#显示图像相关代码" class="headerlink" title="显示图像相关代码"></a>显示图像相关代码</h3><p>(```)<br>    @app.route(“/jianshu”)<br>def jianshu():<br>    import matplotlib<br>    matplotlib.use(‘Agg’)  # 不出现画图的框<br>    from io import BytesIO<br>    import base64<br>    import pymysql<br>    # 这段正常画图<br>    import matplotlib.pyplot as plt<br>    db = pymysql.connect(“106.14.247.240”, “root”, “123456”, “test”)<br>    # 开启一个游标cursor<br>    cursor = db.cursor()<br>    # 获取phone数据表里的所有数据<br>    sql = ‘select * from original_data’<br>    # 执行sql中的语句<br>    cursor.execute(sql)<br>    # 将获取到的sql数据全部显示出来<br>    result = cursor.fetchall()<br>    # 定义需要用上的空数据数组，然后通过遍历数据库的数据将数据附上去<br>    xname = []<br>    ynum = []<br>    # 遍历表里的数据<br>    for x in result:<br>        xname.append(x[1])<br>        ynum.append(x[2])<br>    # 创建一个figure（一个窗口）来显示折线图<br>    plt.figure()<br>    plt.plot(xname, ynum)<br>    plt.xlabel(‘time’)<br>    plt.ylabel(‘count’)<br>    plt.xticks(rotation=30)<br>    for x, y in enumerate(ynum):<br>        plt.text(x, y, ‘%s’ % y)<br>    # 显示图表<br>    plt.show()<br>    # ———–</p><pre><code># 转成图片的步骤sio = BytesIO()plt.savefig(sio, format='png')data = base64.encodebytes(sio.getvalue()).decode()plt.close()# 记得关闭，不然画出来的图是重复的#return html.format(data)return render_template("chart.html").format(data)# format的作用是将data填入{}</code></pre><p>(```)</p>]]></content>
      
      
      <categories>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双目识别项目</title>
      <link href="/2021/01/04/shuang-mu-shi-bie-xiang-mu/"/>
      <url>/2021/01/04/shuang-mu-shi-bie-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架实操项目</title>
      <link href="/2020/09/07/flask-xiang-mu-ying-yong/"/>
      <url>/2020/09/07/flask-xiang-mu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my new blog</title>
      <link href="/2020/02/07/my-new-blog/"/>
      <url>/2020/02/07/my-new-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="博客文章测试"><a href="#博客文章测试" class="headerlink" title="博客文章测试"></a>博客文章测试</h1><h2 id="小标题测试"><a href="#小标题测试" class="headerlink" title="小标题测试"></a>小标题测试</h2><ul><li>换行测试<br>第一行内容</li><li>换行测试<br>第二行内容<br>##网络图片测试<br><img src="https://img1.baidu.com/it/u=425649787,2164930474&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500"><br>##本地图片测试<br><img src="/medias/featureimages/8.jpg"></li></ul><p>##超链接测试<br><a href="https://www.bilibili.com/">bilibili</a></p><ol><li>测试</li><li>测试</li><li>测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
